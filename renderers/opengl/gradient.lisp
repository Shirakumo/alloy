(in-package #:org.shirakumo.alloy.renderers.opengl)

(defclass gradient (simple:gradient)
  ((data :reader data)))

(defmethod shared-initialize :after ((gradient gradient) slots &key)
  (loop for stop across (simple:stops gradient)
        do (setf (car stop) (float (car stop) 0f0)))
  (setf (slot-value gradient 'data) (compute-gradient-data gradient)))

(defmethod simple:request-gradient ((renderer renderer) type start stop stops &key)
  (make-instance (ecase type
                   ((:linear :linear-gradient simple:linear-gradient) 'linear-gradient)
                   ((:radial :radial-gradient simple:radial-gradient) 'radial-gradient)
                   ((:angle :angle-gradient simple:angle-gradient) 'angle-gradient)
                   ((:diamond :diamond-gradient simple:diamond-gradient) 'diamond-gradient))
                 :start start :stop stop :stops stops))

(defmethod render-direct ((shape gradient) renderer color)
  (let ((shader (resource 'gradient-shader renderer))
        (data (data shape)))
    (update-gradient-data shape)
    (update-vertex-buffer (resource 'gradient-vbo renderer) data)
    (bind shader)
    (setf (uniform shader "transform") (simple:transform-matrix renderer))
    (draw-vertex-array (resource 'gradient-vao renderer) :triangle-strip 0 (/ (length data) 6))))

(defmethod render-direct ((image simple:image-pattern) renderer color)
  (let ((shader (resource 'image-shader renderer)))
    (bind shader)
    (bind (simple:image image))
    (setf (uniform shader "uv_scale") (simple:scaling image))
    (setf (uniform shader "uv_offset") (simple:offset image))
    (setf (uniform shader "transform") (load-time-value (make-array 16 :element-type 'single-float
                                                                       :initial-contents '(2.0 0.0 0.0 -1.0
                                                                                           0.0 2.0 0.0 -1.0
                                                                                           0.0 0.0 1.0  0.0
                                                                                           0.0 0.0 0.0  1.0))))
    (draw-vertex-array (resource 'rect-fill-vao renderer) :triangles 0 6)))

(defmethod alloy:render :around ((renderer renderer) (shape simple:patterned-shape))
  (let ((pattern (simple:pattern shape)))
    (etypecase pattern
      (colored:color
       (call-next-method))
      (simple:image-pattern
       (simple:clip renderer shape)
       (render-direct pattern renderer NIL)
       (unclip renderer shape))
      (gradient
       (simple:clip renderer shape)
       (render-direct pattern renderer colors:black)
       (unclip renderer shape)))))

(defgeneric compute-gradient-data (gradient))

;; FIXME: gradients
(defclass linear-gradient (gradient) ())

(defmethod compute-gradient-data ((gradient linear-gradient))
  (let* ((array (make-array (* 6 2 (+ 2 (length (simple:stops gradient)))) :element-type 'single-float))
         (stops (simple:stops gradient))
         (i 0))
    (labels ((vertex (c)
               (setf (aref array (+ i 2)) (colored:r c))
               (setf (aref array (+ i 3)) (colored:g c))
               (setf (aref array (+ i 4)) (colored:b c))
               (setf (aref array (+ i 5)) (colored:a c))
               (incf i 6))
             (stop (color)
               (vertex color)
               (vertex color)))
      (stop (second (aref stops 0)))
      (loop for stop across stops
            do (stop (second stop)))
      (stop (second (aref stops (1- (length stops)))))
      array)))

(defmethod update-gradient-data ((gradient linear-gradient))
  (let* ((array (data gradient))
         (stops (simple:stops gradient))
         (ax (alloy:pxx (simple:start gradient)))
         (ay (alloy:pxy (simple:start gradient)))
         (bx (alloy:pxx (simple:stop gradient)))
         (by (alloy:pxy (simple:stop gradient)))
         (dx (- bx ax))
         (dy (- by ay))
         ;; KLUDGE: Don't know how to stretch it to infinity.
         (ex (* 10000.0 (- dy)))
         (ey (* 10000.0 dx))
         (i 0))
    (declare (type (simple-array single-float (*)) array))
    (declare (type (unsigned-byte 16) i))
    (declare (optimize speed))
    (labels ((vertex (x y)
               (setf (aref array (+ i 0)) x)
               (setf (aref array (+ i 1)) y)
               (incf i 6))
             (stop (tt)
               (declare (type single-float tt))
               (let ((tcx (+ ax (* dx tt)))
                     (tcy (+ ay (* dy tt))))
                 (vertex (- tcx ex) (- tcy ey))
                 (vertex (+ tcx ex) (+ tcy ey)))))
      (stop -1000.0)
      (loop for stop across stops
            do (stop (first stop)))
      (stop +1000.0))))

(defclass radial-gradient (gradient)
  ((resolution :initform (* 4 16) :accessor resolution)))

(defmethod compute-gradient-data ((gradient radial-gradient))
  (let* ((res (resolution gradient))
         (array (make-array (* 6 3 res (1- (length (simple:stops gradient))))))
         (stops (simple:stops gradient))
         (ax (alloy:pxx (simple:start gradient)))
         (ay (alloy:pxy (simple:start gradient)))
         (bx (alloy:pxx (simple:stop gradient)))
         (by (alloy:pxy (simple:stop gradient)))
         (dx (- bx ax))
         (dy (- by ay))
         (r (sqrt (+ (expt dx 2) (expt dy 2))))
         (i -1)
         (step (/ (* 2 PI) res)))
    (labels ((vertex (x y c)
               (setf (aref array (incf i)) x)
               (setf (aref array (incf i)) y)
               (setf (aref array (incf i)) (colored:r c))
               (setf (aref array (incf i)) (colored:g c))
               (setf (aref array (incf i)) (colored:b c))
               (setf (aref array (incf i)) (colored:a c)))
             (stop (ft fcolor tt tcolor)
               (let ((fr (* ft r))
                     (tr (* tt r)))
                 (loop for fphi = 0 then tphi
                       for tphi from step to (* 2 PI) by step
                       for fx = (cos fphi)
                       for fy = (sin fphi)
                       for tx = (cos tphi)
                       for ty = (sin tphi)
                       do (vertex (* fr fx) (* fr fy) fcolor)
                          (vertex (* fr tx) (* fr ty) tcolor)
                          (vertex (* tr tx) (* tr ty) tcolor)
                          (vertex (* tr tx) (* tr ty) tcolor)
                          (vertex (* tr fx) (* tr fy) fcolor)
                          (vertex (* fr fx) (* fr fy) fcolor)))))
      (loop for i from 1 below (length stops)
            for (ft fcolor) = (aref stops (1- i))
            for (tt tcolor) = (aref stops i)
            do (stop ft fcolor tt tcolor))
      array)))

(defclass angle-gradient (gradient) ())

(defmethod compute-gradient-data ((gradient angle-gradient))
  (let* ((res (* 4 16))
         (array (make-array (* 6 3 res)))
         (stops (simple:stops gradient))
         (ax (alloy:pxx (simple:start gradient)))
         (ay (alloy:pxy (simple:start gradient)))
         (bx (alloy:pxx (simple:stop gradient)))
         (by (alloy:pxy (simple:stop gradient)))
         (dx (- bx ax))
         (dy (- by ay))
         (r (sqrt (+ (expt dx 2) (expt dy 2))))
         (i -1))
    (labels ((vertex (x y c)
               (setf (aref array (incf i)) x)
               (setf (aref array (incf i)) y)
               (setf (aref array (incf i)) (colored:r c))
               (setf (aref array (incf i)) (colored:g c))
               (setf (aref array (incf i)) (colored:b c))
               (setf (aref array (incf i)) (colored:a c)))
             (stop (ft fcolor tt tcolor)
               ;; FIXME: This is not correct at all, lol
               (vertex ax ay fcolor)
               (vertex (* r (sin (* 2 PI tt))) (* r (cos (* 2 PI tt))) tcolor)
               (vertex (* r (sin (* 2 PI ft))) (* r (cos (* 2 PI ft))) fcolor)))
      (loop for i from 1 below (length stops)
            for (ft fcolor) = (aref stops (1- i))
            for (tt tcolor) = (aref stops i)
            do (stop ft fcolor tt tcolor))
      array)))

;; This is the same as the radial gradient, just with a minimal resolution.
(defclass diamond-gradient (radial-gradient)
  ((resolution :initform 4)))
