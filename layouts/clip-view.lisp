(in-package #:org.shirakumo.alloy)

(defclass clip-view (layout single-container observable)
  ((offset :initarg :offset :initform (px-point 0 most-negative-single-float) :accessor offset)
   (cell-margins :initarg :cell-margins :initform (margins) :accessor cell-margins)
   (stretch :initarg :stretch :initform T :accessor stretch)
   (limit :initarg :limit :initform NIL :accessor limit)))

(defmethod suggest-size (size (layout clip-view))
  (if (inner layout)
      (case (limit layout)
        ((NIL) size)
        (:x (size (w (suggest-size size (inner layout))) (h size)))
        (:y (size (w size) (h (suggest-size size (inner layout)))))
        (T (suggest-size size (inner layout))))
      size))

(defun clamp-offset (offset layout)
  (flet ((clamp (l x u)
           (min (max l x) u)))
    (let ((inner (inner layout)))
      (if inner
          (px-point (clamp (min 0 (- (pxw (bounds layout)) (pxw (bounds inner)))) (pxx offset) 0)
                    (clamp (min 0 (- (pxh (bounds layout)) (pxh (bounds inner)))) (pxy offset) 0))
          offset))))

(defmethod (setf offset) :around ((offset point) (layout clip-view))
  (let ((clamped (clamp-offset offset layout)))
    (unless (and (/= (pxx clamped) (pxx (offset layout)))
                 (/= (pxy clamped) (pxy (offset layout))))
      (prog1 (call-next-method clamped layout)
        (notify-observers 'value layout clamped layout)))))

(defmethod clipped-p ((layout clip-view))
  (with-unit-parent layout
    (case (limit layout)
      (:x (< (pxh (bounds layout)) (pxh (bounds (inner layout)))))
      (:y (< (pxw (bounds layout)) (pxw (bounds (inner layout)))))
      (T (or (< (pxh (bounds layout)) (pxh (bounds (inner layout))))
             (< (pxw (bounds layout)) (pxw (bounds (inner layout)))))))))

(defmethod refit ((layout clip-view))
  (when (and (inner layout) (layout-tree layout))
    (with-unit-parent layout
      (destructure-margins (:l l :u u :r r :b b :to-px T) (cell-margins layout)
        (let* ((bounds (bounds layout))
               (bounds (px-size (- (pxw bounds) r l) (- (pxh bounds) u b)))
               (ideal (suggest-size bounds (inner layout))))
          (setf (bounds (inner layout)) (px-extent l b
                                                   (cond ((null (stretch layout)) (w ideal))
                                                         ((eq :x (limit layout)) (w bounds))
                                                         (T (max (pxw ideal) (pxw bounds))))
                                                   (cond ((null (stretch layout)) (h ideal))
                                                         ((eq :y (limit layout)) (h bounds))
                                                         (T (max (pxh ideal) (pxh bounds))))))))
      ;; Ensure we clamp the offset into valid bounds.
      (setf (offset layout) (offset layout)))))

(defmethod (setf bounds) :after (bounds (layout clip-view))
  (refit layout))

(defmethod compute-global-position ((element clip-view))
  (let ((x 0f0) (y 0f0))
    (when (layout-tree element)
      (with-unit-parent element
        (loop for current = element then parent
              for parent = (layout-parent current)
              do (incf x (pxx (bounds current)))
                 (incf y (pxy (bounds current)))
                 ;; KLUDGE: wish this didn't have to be like this.
                 (when (typep current 'clip-view)
                   (incf x (pxx (offset current)))
                   (incf y (pxy (offset current))))
              until (eql current parent))))
    (values (- x (pxx (offset element)))
            (- y (pxy (offset element))))))

(defmethod handle ((event scroll) (layout clip-view))
  (restart-case (call-next-method)
    (decline ()
      (let ((off (offset layout))
            (dx (case (limit layout)
                  (:x 0.0)
                  (:y (if (= 0.0 (dx event)) (dy event) (dx event)))
                  (T (dx event))))
            (dy (case (limit layout)
                  (:x (if (= 0.0 (dy event)) (dx event) (- (dy event))))
                  (:y 0.0)
                  (T (- (dy event))))))
        (setf (offset layout) (px-point (+ (* (pxw layout) 0.1 dx) (pxx off))
                                        (+ (* (pxh layout) 0.1 dy) (pxy off))))))))

(defmethod render ((renderer renderer) (layout clip-view))
  (when (inner layout)
    (constrain-visibility layout renderer)
    (translate renderer (offset layout))
    (render renderer (inner layout))))

(defmethod ensure-visible ((element layout-element) (layout clip-view))
  (let* ((eloc (global-location element))
         (esiz (bounds element))
         (vloc (global-location layout))
         (vsiz (bounds layout))
         (off (offset layout))
         (bdiff (- (pxy eloc) (pxy vloc)))
         (tdiff (- (+ (pxy vloc) (pxh vsiz)) (+ (pxy eloc) (pxh esiz))))
         (ldiff (- (pxx eloc) (pxx vloc)))
         (rdiff (- (+ (pxx vloc) (pxw vsiz)) (+ (pxx eloc) (pxw esiz))))
         ny nx)
    (cond ((< bdiff 0.0)
           (setf ny (- (pxy off) bdiff)))
          ((< tdiff 0.0)
           (setf ny (+ (pxy off) tdiff))))
    (cond ((< ldiff 0.0)
           (setf nx (- (pxx off) ldiff)))
          ((< rdiff 0.0)
           (setf nx (+ (pxx off) tdiff))))
    (when (or nx ny)
      (setf (offset layout) (px-point (or nx (pxx off)) (or ny (pxy off))))))
  (call-next-method))
